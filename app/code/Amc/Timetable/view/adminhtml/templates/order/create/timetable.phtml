<div class="admin__page-section-title">
    <strong class="title"><?php echo __('Order Timetable') ?></strong>
</div>
<div id="order-timetable"></div>
<div>
    <div id="timetable-state" class="timetable-state"></div>
</div>
<input type="hidden" name="order[timetable_json]" id="timetable_json" value=""/>
<?php /** @var $this \Amc\Timetable\Block\Adminhtml\Order\Tab\Timetable */ ?>
<?php $resourcesAndEvents = $this->getResourcesAndEvents() ?>
<script>
    require([
        "moment",
        "jquery",
        "jquery/jquery-ui",
        "fullcalendar",
        "fullcalendarScheduler"
    ], function(moment, $){

        $(function() { // document ready
            var $timetable = $('#order-timetable');
            window.order_timetable = $timetable;
            var registry = {};
            $timetable.fullCalendar({
                defaultDate: '<?php echo $this->getInitialDate() ?>',
                editable: true,
                contentHeight: 'auto',
                scrollTime: '00:00',
                header: {
                    left: 'today prev,next',
                    center: 'title',
                    right: 'timelineDay,timelineThreeDays'
                },
                defaultView: 'timelineDay',
                views: {
                    timelineThreeDays: {
                        type: 'timeline',
                        duration: { days: 3 }
                    }
                },
                businessHours: {
                    start: '9:00',
                    end: '19:00',
                    dow: [ 1, 2, 3, 4, 5 ]
                },
                minTime: '09:00', // todo: impldement config "Working hours"
                maxTime: '19:00', // todo: impldement config "Working hours"
                slotLabelFormat: 'HH:mm',
                eventOverlap: true, // will cause the event to take up entire resource height
                resourceAreaWidth: '25%',
                resourceLabelText: "<?php echo $this->escapeQuote(__('Executant')) ?>",
                selectable: true,
                selectHelper: true,
                slotDuration: '00:15',
                slotWidth: 15,

                eventResize: function(event, delta, revertFunc) {
                    // do not allow to resize out of slot range
                    if (isEventOutOfSlot(event) || isEventOverlap(event)) {
                        revertFunc();
                        return false;
                    }
                    registry[event.uuid] = event;
                    var timetableState = getTimetableState($timetable);
                    renderTimetableState(timetableState);
                    writeTimetableJson(timetableState);
                },

                eventDrop: function(event, delta, revertFunc) {
                    // do not allow to drop out of slot range
                    if (isEventOutOfSlot(event) || isEventOverlap(event)) {
                        revertFunc();
                        return false;
                    }
                    registry[event.uuid] = event;
                    var timetableState = getTimetableState($timetable);
                    renderTimetableState(timetableState);
                    writeTimetableJson(timetableState);
                },

                eventClick: function(event) {
                    if (window.confirm('Discard time range?')) {
                        event.deleted = 1;
                        delete registry[event.uuid];
                        $timetable.fullCalendar('removeEvents', event.id);
                        var timetableState = getTimetableState($timetable);
                        renderTimetableState(timetableState);
                        writeTimetableJson(timetableState);
                    }
                },

                select: function(start, end, jsEvent, calendar, resource)
                {
                    $timetable.fullCalendar('unselect');

                    if (resource.id && 'user' === resource.type) {

                        // select product duration if just click happened
                        var productDuration = parseInt(resource.parent.duration);
                        if (productDuration > 0 && Math.ceil(productDuration / 15) >= 1) { // product duration at least 15 minutes
                            var selectedDuration = moment.duration(end.diff(start));
                            if (15 == selectedDuration.asMinutes()) { // most probably user just clicked on time slot, no selection
                                end = start.clone().add(Math.ceil(productDuration / 15) * 15, 'minutes');
                            }
                        }

                        var slot = getResourceTimeSlot(resource, start, end);
                        if (!slot)
                            return false;

                        // correct start and end for selected interval in case of out of slot range
                        if (start.isBefore(slot.start))
                            start = slot.start;

                        if (end.isAfter(slot.end))
                            end = slot.end;

                        var eventUuid = uuid();
                        var eventData = {
                            id: eventUuid,
                            title: '', // time start - time end?
                            start: start,
                            end: end,
                            resourceId: resource.id,
                            uuid: eventUuid,
                            type: 'order',
                            user_id: slot.user_id,
                            sales_item_id: slot.sales_item_id,
                            room_id: slot.room_id,
                            slot: slot,
                            constraint: {
                                start: slot.start,
                                end: slot.end
                            }
                        };

                        if (isEventOverlap(eventData))
                            return false;

                        $timetable.fullCalendar('renderEvent', eventData, true); // stick? = true
                        registry[eventData.id] = eventData;
                        var timetableState = getTimetableState($timetable);
                        renderTimetableState(timetableState);
                        writeTimetableJson(timetableState);
                        $('#timetable-save').removeClass('disabled');
                    }
                },

                selectOverlap: function(event) {
                    console.log(event);
                    return event.rendering === 'background';
                },

                resources: {
                    url: '<?php echo $block->getUrl('timetable/order/resourcesJson') ?>',
                    type: 'GET',
                    data: {
                        quote_id: '<?php echo $block->getQuoteId() ?>'
                    }
                },
                events: {
                    url: '<?php echo $block->getUrl('timetable/order/eventsJson') ?>',
                    type: 'GET',
                    data: {
                        quote_id: '<?php echo $block->getQuoteId() ?>'
                    }
                }

            });

            var isEventOutOfSlot = function(event) {
                var slot = getEventTimeSlot(event);
                if (!slot)
                    return false;

                // out of slot == event does not belong to resource or time range violation
                return event.resourceId !== slot.resourceId
                    || event.start.isBefore(slot.start)
                    || event.end.isAfter(slot.end);
            };

            // check if event overlaps with other events in this resource
            var isEventOverlap = function(event) {
                // use event.resourceId since event might be not added to calendar yet
                var resourceEvents = $timetable.fullCalendar('getResourceEvents', event.resourceId);
                var overlapEvents = resourceEvents.filter(function(resourceEvent) {
                    return event.id != resourceEvent.id
                        && resourceEvent.type === 'order'
                        && timeRangesOverlap(event.start, event.end, resourceEvent.start, resourceEvent.end);
                });
                return overlapEvents.length > 0;
            };

            var getTimetableState = function(timetable) {

                var state = [],
                    stateRow,
                    stateRowEvents,
                    events,
                    resources = timetable.fullCalendar('getResources'),
                    resource,
                    i, j, k;
                for(i = 0; i < resources.length; i++) {
                    resource = resources[i];
                    stateRow = { title: resource.title, sales_item_id: resource.sales_item_id, children: [] };
                    for(j = 0; j < resource.children.length; j++) {
                        stateRowEvents = [];
                        events = timetable.fullCalendar('getResourceEvents', resource.children[j]);
                        for(k = 0; k < events.length; k++) {
                            if (events[k].type == 'order') {
                                stateRowEvents.push(events[k]);
                            }
                        }
                        if (stateRowEvents.length > 0) {
                            stateRow.children.push( { title: resource.children[j].title, events: stateRowEvents } );
                        }
                    }
                    state.push( stateRow );
                }
                return state;
            };

            var l = function(a)
            {
                console.log(a);
            };

            // return "background" event which event belongs to
            var getEventTimeSlot = function(event) {
                if (event.slot) {
                    return event.slot;
                }
                var resource = $timetable.fullCalendar('getEventResource', event);
                return getResourceTimeSlot(resource, event.start, event.end);
            };

            // return "background" event for given time range (start, end) and resource
            var getResourceTimeSlot = function(resource, start, end) {
                var resourceSlots = $timetable.fullCalendar('getResourceEvents', resource);
                if (resourceSlots.length == 0) {
                    return false;
                }
                // pick up only time slots that intersect with selected period
                var fitSlots = resourceSlots.filter(function(resourceEvent) {
                    return 'background' === resourceEvent.rendering
                        && timeRangesOverlap(start, end, resourceEvent.start, resourceEvent.end);
                });
                // no intersections - no selection
                if (fitSlots.length == 0) {
                    return false;
                }
                // pick up only first intersection, ignore multiple selection
                return fitSlots[0];
            };

            // check if (startA .. endA) intersects (startB .. endB)
            var timeRangesOverlap = function(startA, endA, startB, endB) {
                return startA.isBefore(endB) && endA.isAfter(startB);
            };

            var renderTimetableState = function(state) {
                var i, j, k,
                    events,
                    // html = '',
                    salesItemHtml = '';
                moment.locale('es');
                for(i = 0; i < state.length; i++) {
                    // this is for rendering timetable right next to calendar
                    //html += '<div class="parent">'
                    //    + state[i].title
                    //    + (state[i].children.length == 0 ? '<span class="not-assigned">&ndash; not assigned</span>' : '')
                    //   + '</div>';

                    for(j = 0; j < state[i].children.length; j++) {
                        salesItemHtml = '<div class="child">'
                            // + '<?php //echo __('by') ?>// ' + '<span class="who">' + state[i].children[j].title + '</span>';
                            + '<span class="who">' + state[i].children[j].title + '</span>';
                        events = state[i].children[j].events;
                        // salesItemHtml += '<?php echo __('at') ?>';
                        salesItemHtml += '<span class="times">';
                        for(k = 0; k < events.length; k++) {
                            salesItemHtml += '<span class="time" data-event-id="' + events[k].uuid + '" onclick="gotoEvent(this);">' + events[k].start.format("ddd D.MM, HH:mm") + '</span>';
                        }
                        salesItemHtml.replace(/;$/g, '');
                        salesItemHtml += '</span>';
                        salesItemHtml += '</div>';
                        $('#timetable-state-' + state[i].sales_item_id).html(salesItemHtml);

                        // html += salesItemHtml;
                    }
                }
                // this is for rendering timetable right next to calendar
                // $('#timetable-state').html(html);
            };

            var writeTimetableJson = function() {
                var changedEvents = [];
                $.each(registry, function(uuid, event) {
                    changedEvents.push({
                        user_id: event.user_id,
                        room_id: event.room_id,
                        sales_item_id: event.sales_item_id,
                        start_at: event.start.format('YYYY-MM-DD HH:mm:00'),
                        end_at: event.end.format('YYYY-MM-DD HH:mm:00'),
                        uuid: uuid,
                        deleted: event.deleted
                    });
                });
                $('#timetable_json').val(JSON.stringify(changedEvents));
            };

            window.gotoEvent = function(timeSlot) {
                var events = $timetable.fullCalendar( 'clientEvents', $(timeSlot).attr('data-event-id'));
                if (events.length > 0) {
                    window.order_timetable.fullCalendar( 'gotoDate', events[0].start);
                }
            };

            var uuid = function () {
                var i, random;
                var uuid = '';

                for (i = 0; i < 32; i++) {
                    random = Math.random() * 16 | 0;
                    if (i === 8 || i === 12 || i === 16 || i === 20) {
                        uuid += '-';
                    }
                    uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))
                        .toString(16);
                }

                return uuid;
            };
        });
    });
</script>
