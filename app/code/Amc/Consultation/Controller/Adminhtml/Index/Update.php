<?php

namespace Amc\Consultation\Controller\Adminhtml\Index;

use Magento\Backend\App\Action;
use Magento\Framework\Exception\NoSuchEntityException;

class Update extends \Amc\Consultation\Controller\Adminhtml\Index
{
    /**
     * @var \Amc\Consultation\Model\Layout
     */
    protected $consultationLayout;

    public function __construct(
        \Magento\Framework\View\Result\PageFactory $resultPageFactory,
        \Amc\Consultation\Model\ConsultationFactory $consultationFactory,
        \Magento\Backend\Model\Auth\Session $authSession,
        \Psr\Log\LoggerInterface $loggerInterface,
        Action\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository,
        \Magento\Sales\Api\OrderRepositoryInterface $orderRepository,
        \Amc\User\Model\UserProductLink $userProductLink,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Amc\Consultation\Model\Layout $consultationLayout
    ) {
        $this->consultationLayout = $consultationLayout;
        parent::__construct($resultPageFactory, $consultationFactory, $authSession, $loggerInterface, $context, $registry, $customerRepository, $orderRepository, $userProductLink, $productFactory, $productRepository); // TODO: Change the autogenerated stub
    }

    /**
     * Consultation save action
     */
    public function execute()
    {
        $consultationId = $this->getRequest()->getParam('consultation_id');
        $returnToEdit = false;
        $editMode = false;

        try {
            $consultation = $this->consultationFactory->create();

            if ($consultationId) {
                $consultation->load($consultationId);
                $editMode = true;
            } else {
                $createdAt = new \DateTime('now');
                $consultation->setProductId($this->getRequest()->getParam('product_id'));
                $consultation->setCustomerId($this->getRequest()->getParam('customer_id'));
                $consultation->setUserId($this->getRequest()->getParam($this->_authSession->getUser()->getId()));
                $consultation->setOrderId($this->getRequest()->getParam(''));
                $consultation->setOrderItemId($this->getRequest()->getParam(''));
                $consultation->setCreatedAt($createdAt->format('Y-m-d H:i:s'));
            }

            $jsonData = \Zend_Json::encode($this->getRequest()->getParam('data'));
            $consultation->setJsonData($jsonData);

            $consultation->addData($this->getRequest()->getParams());
            if ($this->getRequest()->getParam('user_date')) {
                $userDate = \DateTime::createFromFormat('d/m/Y', $this->getRequest()->getParam('user_date'));
                $consultation->setUserDate($userDate->format('Y-m-d H:i:s'));
            } else {
                $consultation->setUserDate(null);
            }
            $createdAt = new \DateTime('now');
            $consultation->setCreatedAt($createdAt->format('Y-m-d H:i:s'));
            $consultation->setUserId($this->_authSession->getUser()->getId());
            $order = $this->_orderRepository->get($this->getRequest()->getParam('order_id'));
            $consultation->setCustomerId($order->getCustomerId());
            $consultation->save();

            $editMode
                ? $this->messageManager->addSuccess(__('You have updated the consultation.'))
                : $this->messageManager->addSuccess(__('You have created the consultation.'));

            $resultRedirect = $this->resultRedirectFactory->create();
            if ($returnToEdit && $consultationId) {
                $resultRedirect->setPath(
                    'consultation/*/edit',
                    ['consultation_id' => $consultationId, '_current' => true]
                );
            } else {
                $resultRedirect->setPath('sales/order/view', ['order_id' => $order->getEntityId()]);
            }
            return $resultRedirect;

        } catch (NoSuchEntityException $e) {
            $this->messageManager->addException($e, __('An error occurred while saving the consultation.'));
            $returnToEdit = true;
        } catch (\Exception $e) {
            $this->loggerInterface->critical($e);
            $this->messageManager->addError($e->getMessage());
            $returnToEdit = true;
        }

    }
}
