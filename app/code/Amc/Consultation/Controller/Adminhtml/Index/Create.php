<?php

namespace Amc\Consultation\Controller\Adminhtml\Index;

use Magento\Backend\App\Action;
use Magento\Framework\Exception\NoSuchEntityException;

class Create extends \Amc\Consultation\Controller\Adminhtml\Index
{
    public function __construct(
        \Magento\Framework\View\Result\PageFactory $resultPageFactory,
        \Amc\Consultation\Model\ConsultationFactory $consultationFactory,
        \Magento\Backend\Model\Auth\Session $authSession,
        \Psr\Log\LoggerInterface $loggerInterface,
        Action\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository,
        \Magento\Sales\Api\OrderRepositoryInterface $orderRepository,
        \Amc\User\Model\UserProductLink $userProductLink,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Amc\Consultation\Model\Layout $layouts
    )
    {
        $this->layouts = $layouts;
        parent::__construct($resultPageFactory, $consultationFactory, $authSession, $loggerInterface, $context, $registry, $customerRepository, $orderRepository, $userProductLink, $productFactory, $productRepository); // TODO: Change the autogenerated stub
    }

    public function execute()
    {
        $orderId = $this->_request->getParam('order_id');
        //$orderItemId = $this->_request->getParam('order_item_id');
        $productId = $this->getRequest()->getParam('product_id');
        try {
            $order = $this->_orderRepository->get($orderId);
            $customer = $this->_customerRepository->getById($order->getCustomerId());
            $product = $this->_productRepository->getById($productId);
            //$product = $this->_productFactory->create()->load($productId);

            // todo: check if order item product id == product_id

            $this->_coreRegistry->register('current_order', $order);
            $this->_coreRegistry->register('current_customer', $customer);
            $this->_coreRegistry->register('current_product', $product);

            $currentUser = $this->_authSession->getUser();
//            $this->throwExceptionIfUserNotAllowed($currentUser->getId(), $productId);

            return $this->resultPageFactory->create();

        } catch (NoSuchEntityException $e) {
            $this->messageManager->addExceptionMessage($e, __('Entity not found.'));
            $resultRedirect = $this->resultRedirectFactory->create();
            // todo: check if order exists => if no then redirect somewhereelse
            $resultRedirect->setPath('sales/order/view', ['order_id' => $orderId]);
            return $resultRedirect;
        } catch (\Exception $e) {
            $this->messageManager->addExceptionMessage($e, __('An error occurred while creating the consultation.'));
            $resultRedirect = $this->resultRedirectFactory->create();
            $resultRedirect->setPath('sales/order/view', ['order_id' => $orderId]);
            return $resultRedirect;
        }
    }

    private function throwExceptionIfUserNotAllowed($userId, $productId)
    {
        if ( ! $this->_userProductLink->isProductAssignedToUser($userId, $productId)) {
            throw new \Exception(__('You are not allowed to create consultation for this product.'));
        }
    }
}
